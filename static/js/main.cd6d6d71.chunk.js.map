{"version":3,"sources":["config/socket.js","constants.js","App.js","config/peer.js","reportWebVitals.js","index.js"],"names":["socket","WebSocket","process","MESSAGE","JOIN_LOBBY","JOIN_LOBBY_ACK","GET_PEER_LIST","GET_PEER_LIST_ACK","PEER_LIST_CHANGED","GET_STUN_TURN_INFO","GET_STUN_TURN_INFO_ACK","WEBRTC_OFFER","WEBRTC_ANSWER","ICE_CANDIDATE","CALL_STARTED","HANG_UP","buttonProps","variant","color","peer","RTCPeerConnection","iceServers","urls","usePeer","videoRef","React","useRef","remoteVideoRef","recipientRef","useState","uuid","slice","senderName","setSenderName","recipientName","setRecipientName","localeStream","setLocaleStream","videoDevices","microphoneDevices","volumeDevices","joinedUsers","setJoinedUsers","handleConnectToMediaStream","a","navigator","mediaDevices","getUserMedia","video","stream","current","getTracks","forEach","track","addTrack","srcObject","handleCall","createOffer","offerToReceiveVideo","sdpOffer","setLocalDescription","message","type","data","sender","recipient","send","JSON","stringify","useEffect","addEventListener","candidate","streams","parse","users","setRemoteDescription","createAnswer","sdpAnswer","console","log","addIceCandidate","handleChangeSenderName","event","target","value","handleSelectRecipient","newRecipientName","handleJoinLobby","App","Box","p","Grid","container","spacing","item","xs","autoPlay","ref","style","width","height","TextField","onChange","fullWidth","autoFocus","disabled","Boolean","find","name","Button","onClick","map","status","Badge","badgeContent","IconButton","borderRadius","Paper","component","Typography","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.cd6d6d71.chunk.js","sourcesContent":["export const socket = new WebSocket(process.env.REACT_APP_SOCKET);\n","export const MESSAGE = {\n  TYPE: {\n    JOIN_LOBBY: \"JOIN_LOBBY\",\n    JOIN_LOBBY_ACK: \"JOIN_LOBBY_ACK\",\n\n    GET_PEER_LIST: \"GET_PEER_LIST\",\n    GET_PEER_LIST_ACK: \"GET_PEER_LIST_ACK\",\n    PEER_LIST_CHANGED: \"PEER_LIST_CHANGED\",\n\n    GET_STUN_TURN_INFO: \"GET_STUN_TURN_INFO\",\n    GET_STUN_TURN_INFO_ACK: \"GET_STUN_TURN_INFO_ACK\",\n\n    WEBRTC_OFFER: \"WEBRTC_OFFER\",\n    WEBRTC_ANSWER: \"WEBRTC_ANSWER\",\n    ICE_CANDIDATE: \"ICE_CANDIDATE\",\n\n    CALL_STARTED: \"CALL_STARTED\",\n\n    HANG_UP: \"HANG_UP\",\n  },\n};\n","import React from \"react\";\n\nimport { v4 as uuid } from \"uuid\";\n\nimport {\n  Select,\n  MenuItem,\n  Grid,\n  Box,\n  Button,\n  Paper,\n  Typography,\n  Badge,\n  TextField,\n  IconButton,\n} from \"@material-ui/core\";\nimport \"webrtc-adapter\";\n\nimport { PEER } from \"./config/peer\";\nimport { socket } from \"./config/socket\";\nimport { MESSAGE } from \"./constants\";\n\nconst buttonProps = {\n  variant: \"contained\",\n  color: \"primary\",\n};\n\nconst CustomSelect = ({ options, label }) => {\n  const [value, setValue] = React.useState(\"\");\n\n  React.useEffect(() => {\n    if (options.length === 1) {\n      const [{ deviceId }] = options;\n\n      setValue(deviceId);\n      return;\n    }\n\n    const [{ deviceId }] = options.filter(\n      ({ deviceId }) => deviceId === \"default\"\n    );\n\n    setValue(deviceId);\n  }, [options.length]);\n\n  return (\n    <Select\n      value={value}\n      displayEmpty\n      fullWidth\n      label={label}\n      variant=\"outlined\"\n    >\n      <MenuItem value=\"\" disabled>\n        Select device\n      </MenuItem>\n      {options.map(({ deviceId, label }) => (\n        <MenuItem key={deviceId} value={deviceId}>\n          {label}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n\nconst peer = new RTCPeerConnection(PEER.CONFIG);\n\nconst usePeer = () => {\n  const videoRef = React.useRef(null);\n  const remoteVideoRef = React.useRef(null);\n\n  const recipientRef = React.useRef(null);\n\n  const [senderName, setSenderName] = React.useState(\n    `${uuid().slice(0, 4)}@${uuid().slice(0, 4)}`\n  );\n  const [recipientName, setRecipientName] = React.useState(\"\");\n  const [localeStream, setLocaleStream] = React.useState(null);\n\n  const [videoDevices, setVideoDevices] = React.useState([]);\n  const [microphoneDevices, setMicrophoneDevices] = React.useState([]);\n  const [volumeDevices, setVolumeDevices] = React.useState([]);\n\n  const [joinedUsers, setJoinedUsers] = React.useState([]);\n\n  const handleConnectToMediaStream = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n    });\n\n    setLocaleStream(stream);\n\n    if (!videoRef.current) return;\n\n    stream.getTracks().forEach((track) => {\n      peer.addTrack(track, stream);\n    });\n\n    videoRef.current.srcObject = stream;\n  };\n\n  // const handleConnectToDevices = async () => {\n  //   const devices = await navigator.mediaDevices.enumerateDevices();\n\n  //   const microphones = devices.filter(({ kind }) => kind === \"audioinput\");\n  //   const volumes = devices.filter(({ kind }) => kind === \"audiooutput\");\n  //   const videos = devices.filter(({ kind }) => kind === \"videoinput\");\n\n  //   setVideoDevices(videos);\n  //   setVolumeDevices(volumes);\n  //   setMicrophoneDevices(microphones);\n\n  //   handleConnectToMediaStream();\n  // };\n\n  // const handleCInitPeer = () => {\n  //   const peerInit = new RTCPeerConnection(PEER.CONFIG);\n\n  //   setPeer(peerInit);\n  // };\n\n  const handleCall = async () => {\n    // console.log(\"Create offer...\");\n    const sdpOffer = await peer.createOffer({ offerToReceiveVideo: true });\n\n    // console.log(\"Set local offer...\", sdpOffer);\n    await peer.setLocalDescription(sdpOffer);\n\n    const message = {\n      type: MESSAGE.TYPE.WEBRTC_OFFER,\n      data: sdpOffer,\n      sender: senderName,\n      recipient: recipientName,\n    };\n\n    recipientRef.current = recipientName;\n\n    // console.log(\"Send offer...\");\n    socket.send(JSON.stringify(message));\n  };\n\n  const handleJoinLobby = () => {\n    const message = {\n      type: MESSAGE.TYPE.JOIN_LOBBY,\n      data: \"\",\n      sender: senderName,\n      recipient: \"\",\n    };\n\n    socket.send(JSON.stringify(message));\n  };\n\n  const handleSelectRecipient = (newRecipientName) =>\n    setRecipientName(newRecipientName);\n\n  // const handleInitListenersForDevices = () => {\n  //   navigator.mediaDevices.addEventListener(\n  //     \"devicechange\",\n  //     handleConnectToDevices\n  //   );\n  // };\n\n  const handleInitListenersForPeer = () => {\n    peer.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        const message = {\n          type: MESSAGE.TYPE.ICE_CANDIDATE,\n          data: candidate,\n          sender: senderName,\n          recipient: recipientRef.current,\n        };\n\n        // console.log(\"send ice candidate\", message);\n        socket.send(JSON.stringify(message));\n      }\n    });\n\n    // peer.addEventListener(\"iceconnectionstatechange\", (event) => {\n    //   console.log(\"iceconnectionstatechange event\", event);\n    // });\n\n    peer.addEventListener(\"track\", ({ streams }) => {\n      if (!remoteVideoRef.current) return;\n\n      const [stream] = streams;\n\n      if (remoteVideoRef.current.srcObject === stream) return;\n\n      // console.log(\"got remote stream\");\n\n      remoteVideoRef.current.srcObject = stream;\n    });\n  };\n\n  const handleChangeSenderName = (event) => setSenderName(event.target.value);\n\n  React.useEffect(() => {\n    // handleCInitPeer();\n    handleInitListenersForPeer();\n    handleConnectToMediaStream();\n    // handleConnectToDevices();\n    // handleInitListenersForDevices();\n\n    socket.addEventListener(\"message\", async (message) => {\n      const { type, data, sender, recipient } = JSON.parse(message.data);\n\n      // console.log(\"Got new message\", data);\n\n      if (type === MESSAGE.TYPE.PEER_LIST_CHANGED) {\n        setJoinedUsers(data.users);\n      }\n\n      if (type === MESSAGE.TYPE.WEBRTC_OFFER && sender !== senderName) {\n        recipientRef.current = sender;\n        // console.log(\"Save remote offer...\", data);\n        await peer.setRemoteDescription(data);\n\n        // console.log(\"Create answer\");\n        const sdpAnswer = await peer.createAnswer();\n\n        // console.log(\"Set local answer...\", sdpAnswer);\n        await peer.setLocalDescription(sdpAnswer);\n\n        // console.log(\"Send answer\");\n        const message = {\n          type: MESSAGE.TYPE.WEBRTC_ANSWER,\n          data: sdpAnswer,\n          sender: recipient,\n          recipient: sender,\n        };\n        socket.send(JSON.stringify(message));\n      }\n\n      if (type === MESSAGE.TYPE.WEBRTC_ANSWER && sender !== senderName) {\n        // console.log(\"Save remote answer...\", data);\n\n        await peer.setRemoteDescription(data);\n      }\n\n      console.log(type);\n      if (type === MESSAGE.TYPE.ICE_CANDIDATE) {\n        // console.log(`ICE_CANDIDATE from ${sender}`, data);\n\n        peer.addIceCandidate(data);\n      }\n    });\n  }, []);\n\n  return {\n    peer,\n\n    senderName,\n    handleChangeSenderName,\n\n    recipientName,\n    handleSelectRecipient,\n\n    videoRef,\n    remoteVideoRef,\n\n    localeStream,\n    videoDevices,\n    microphoneDevices,\n    volumeDevices,\n    joinedUsers,\n    handleCall,\n    handleJoinLobby,\n  };\n};\n\nexport const App = () => {\n  const peer = usePeer();\n\n  return (\n    <Box p={2}>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <video\n            autoPlay\n            ref={peer.videoRef}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <video\n            autoPlay\n            ref={peer.remoteVideoRef}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            value={peer.senderName}\n            onChange={peer.handleChangeSenderName}\n            variant=\"outlined\"\n            fullWidth\n            autoFocus\n            disabled={Boolean(\n              peer.joinedUsers.find(({ name }) => name === peer.senderName)\n            )}\n          />\n        </Grid>\n        <Grid item xs=\"auto\">\n          <Button\n            {...buttonProps}\n            onClick={peer.handleCall}\n            disabled={!peer.recipientName}\n          >\n            Call {peer.recipientName && `to ${peer.recipientName}`}\n          </Button>\n        </Grid>\n        <Grid item xs=\"auto\">\n          <Button\n            {...buttonProps}\n            onClick={peer.handleJoinLobby}\n            disabled={\n              !peer.senderName ||\n              Boolean(\n                peer.joinedUsers.find(({ name }) => name === peer.senderName)\n              )\n            }\n          >\n            {Boolean(\n              peer.joinedUsers.find(({ name }) => name === peer.senderName)\n            )\n              ? \"Joined\"\n              : \"Join\"}\n          </Button>\n        </Grid>\n        {/* {Boolean(peer.microphoneDevices.length) && (\n          <Grid item xs={4}>\n            <CustomSelect\n              label=\"Microphone devices\"\n              options={peer.microphoneDevices}\n            />\n          </Grid>\n        )}\n        {Boolean(peer.volumeDevices.length) && (\n          <Grid item xs={4}>\n            <CustomSelect label=\"Volume devices\" options={peer.volumeDevices} />\n          </Grid>\n        )}\n        {Boolean(peer.videoDevices.length) && (\n          <Grid item xs={4}>\n            <CustomSelect label=\"Video devices\" options={peer.videoDevices} />\n          </Grid>\n        )} */}\n      </Grid>\n      <Grid container spacing={2}>\n        {peer.joinedUsers.map(({ name, status }) => {\n          if (peer.senderName === name) return null;\n\n          return (\n            <Grid item xs=\"auto\" key={name}>\n              <Badge\n                badgeContent={status === \"ONLINE\" ? \"online\" : \"offline\"}\n                color={status === \"ONLINE\" ? \"primary\" : \"secondary\"}\n              >\n                <IconButton\n                  style={{ borderRadius: 8 }}\n                  onClick={() => peer.handleSelectRecipient(name)}\n                >\n                  <Paper component={Box} p={2}>\n                    <Typography>{name}</Typography>\n                  </Paper>\n                </IconButton>\n              </Badge>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n","export const PEER = {\n  CONFIG: {\n    iceServers: [{ urls: [\"stun:stun.l.google.com:19302\"] }],\n    // iceTransportPolicy: \"relay\",\n    // iceCandidatePoolSize: 0,\n  },\n};\n\n// export const PEER = {\n//   CONFIG: {\n//     iceServers: [\n//       { urls: \"stun:global.stun.twilio.com:3478?transport=udp\" },\n//       {\n//         username:\n//           \"65476c4de382f7206ca064abf0b3e8e0c4e6c9d54c81f598416d705ee48db989\",\n//         urls: \"turn:global.turn.twilio.com:3478?transport=udp\",\n//         credential: \"xq/awny4f8Ply8kbpJ3Y/GOt4gatVRpfMxFLaf0Yd9s=\",\n//       },\n//       {\n//         username:\n//           \"65476c4de382f7206ca064abf0b3e8e0c4e6c9d54c81f598416d705ee48db989\",\n//         urls: \"turn:global.turn.twilio.com:3478?transport=tcp\",\n//         credential: \"xq/awny4f8Ply8kbpJ3Y/GOt4gatVRpfMxFLaf0Yd9s=\",\n//       },\n//       {\n//         username:\n//           \"65476c4de382f7206ca064abf0b3e8e0c4e6c9d54c81f598416d705ee48db989\",\n//         urls: \"turn:global.turn.twilio.com:443?transport=tcp\",\n//         credential: \"xq/awny4f8Ply8kbpJ3Y/GOt4gatVRpfMxFLaf0Yd9s=\",\n//       },\n//     ],\n//     iceTransportPolicy: \"relay\",\n//     iceCandidatePoolSize: 0,\n//   },\n// };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
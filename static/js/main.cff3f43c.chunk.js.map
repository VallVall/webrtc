{"version":3,"sources":["config/socket.js","constants.js","Lobby.js","App.js","config/peer.js","reportWebVitals.js","index.js"],"names":["socket","WebSocket","process","MESSAGE","JOIN_LOBBY","JOIN_LOBBY_ACK","GET_PEER_LIST","GET_PEER_LIST_ACK","PEER_LIST_CHANGED","GET_STUN_TURN_INFO","GET_STUN_TURN_INFO_ACK","WEBRTC_OFFER","WEBRTC_ANSWER","ICE_CANDIDATE","CALL_STARTED","HANG_UP","Lobby","users","myName","onSelectRecipient","Grid","container","spacing","map","name","status","item","xs","Badge","badgeContent","color","IconButton","style","borderRadius","onClick","Paper","component","Box","p","Typography","buttonProps","variant","CustomSelect","value","options","type","onChangeDevice","Select","displayEmpty","fullWidth","onChange","event","target","MenuItem","disabled","deviceId","label","setter","setValue","length","filter","peer","RTCPeerConnection","iceServers","urls","usePeer","videoRef","React","useRef","remoteVideoRef","recipientRef","useState","uuid","slice","senderName","setSenderName","recipientName","setRecipientName","localeStream","setLocaleStream","videoDevices","setVideoDevices","microphoneDevices","setMicrophoneDevices","volumeDevices","setVolumeDevices","selectedVideoDevice","setSelectedVideoDevice","selectedMicrophoneDevice","setSelectedMicrophoneDevice","selectedVolumeDevice","setSelectedVolumeDevice","joinedUsers","setJoinedUsers","video","audio","deviceConstraints","setDeviceConstraints","handleConnectToMediaStream","constraints","a","navigator","mediaDevices","getUserMedia","stream","current","getTracks","forEach","track","addTrack","srcObject","handleConnectToDevices","enumerateDevices","devices","microphones","kind","volumes","videos","handleCall","createOffer","offerToReceiveVideo","sdpOffer","setLocalDescription","message","data","sender","recipient","send","JSON","stringify","handleChangeDevice","newDevicesContraints","exact","find","getSenders","replaceTrack","useEffect","addEventListener","candidate","streams","then","parse","setRemoteDescription","createAnswer","sdpAnswer","console","log","addIceCandidate","handleChangeSenderName","handleSelectRecipient","newRecipientName","isVideoOn","isAudioOn","handleToggleDevicesStatus","deviceType","currentDevicesContraints","enabled","handleChangeOutputDevice","setSinkId","handleJoinLobby","App","justify","autoPlay","ref","width","height","Videocam","VideocamOff","Mic","MicOff","Boolean","TextField","autoFocus","Button","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.cff3f43c.chunk.js","sourcesContent":["export const socket = new WebSocket(process.env.REACT_APP_SOCKET);\n","export const MESSAGE = {\n  TYPE: {\n    JOIN_LOBBY: \"JOIN_LOBBY\",\n    JOIN_LOBBY_ACK: \"JOIN_LOBBY_ACK\",\n\n    GET_PEER_LIST: \"GET_PEER_LIST\",\n    GET_PEER_LIST_ACK: \"GET_PEER_LIST_ACK\",\n    PEER_LIST_CHANGED: \"PEER_LIST_CHANGED\",\n\n    GET_STUN_TURN_INFO: \"GET_STUN_TURN_INFO\",\n    GET_STUN_TURN_INFO_ACK: \"GET_STUN_TURN_INFO_ACK\",\n\n    WEBRTC_OFFER: \"WEBRTC_OFFER\",\n    WEBRTC_ANSWER: \"WEBRTC_ANSWER\",\n    ICE_CANDIDATE: \"ICE_CANDIDATE\",\n\n    CALL_STARTED: \"CALL_STARTED\",\n\n    HANG_UP: \"HANG_UP\",\n  },\n};\n","import {\n  Grid,\n  Box,\n  Paper,\n  Typography,\n  Badge,\n  IconButton,\n} from \"@material-ui/core\";\n\nexport const Lobby = ({ users, myName, onSelectRecipient }) => (\n  <Grid container spacing={2}>\n    {users.map(({ name, status }) => {\n      if (myName === name) return null;\n\n      return (\n        <Grid item xs=\"auto\" key={name}>\n          <Badge\n            badgeContent={status === \"ONLINE\" ? \"online\" : \"offline\"}\n            color={status === \"ONLINE\" ? \"primary\" : \"secondary\"}\n          >\n            <IconButton\n              style={{ borderRadius: 8 }}\n              onClick={() => onSelectRecipient(name)}\n            >\n              <Paper component={Box} p={2}>\n                <Typography>{name}</Typography>\n              </Paper>\n            </IconButton>\n          </Badge>\n        </Grid>\n      );\n    })}\n  </Grid>\n);\n","import React from \"react\";\n\nimport { v4 as uuid } from \"uuid\";\n\nimport {\n  Select,\n  MenuItem,\n  Grid,\n  Box,\n  Button,\n  TextField,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Videocam, VideocamOff, Mic, MicOff } from \"@material-ui/icons\";\n\nimport \"webrtc-adapter\";\n\nimport { PEER } from \"./config/peer\";\nimport { socket } from \"./config/socket\";\nimport { MESSAGE } from \"./constants\";\n\nimport { Lobby } from \"./Lobby\";\n\nconst buttonProps = {\n  variant: \"contained\",\n  color: \"primary\",\n};\n\nconst CustomSelect = ({ value, options, type, onChangeDevice }) => {\n  const handleChangeDevice = (event) => {\n    if (type === \"volume\") {\n      onChangeDevice(event.target.value);\n\n      return;\n    }\n\n    onChangeDevice(type, event.target.value);\n  };\n\n  return (\n    <Select\n      value={value}\n      displayEmpty\n      fullWidth\n      variant=\"outlined\"\n      onChange={handleChangeDevice}\n    >\n      <MenuItem value=\"\" disabled>\n        Select device\n      </MenuItem>\n      {options.map(({ deviceId, label }) => (\n        <MenuItem key={deviceId} value={deviceId}>\n          {label}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n\nconst setter = (options, setValue) => {\n  if (options.length === 1) {\n    const [{ deviceId }] = options;\n\n    setValue(deviceId);\n    return;\n  }\n\n  const [{ deviceId }] = options.filter(\n    ({ deviceId }) => deviceId === \"default\"\n  );\n\n  setValue(deviceId);\n};\n\nconst peer = new RTCPeerConnection(PEER.CONFIG);\n\nconst usePeer = () => {\n  const videoRef = React.useRef(null);\n  const remoteVideoRef = React.useRef(null);\n\n  const recipientRef = React.useRef(null);\n\n  const [senderName, setSenderName] = React.useState(\n    `${uuid().slice(0, 4)}@${uuid().slice(0, 4)}`\n  );\n  const [recipientName, setRecipientName] = React.useState(\"\");\n  const [localeStream, setLocaleStream] = React.useState(null);\n\n  const [videoDevices, setVideoDevices] = React.useState([]);\n  const [microphoneDevices, setMicrophoneDevices] = React.useState([]);\n  const [volumeDevices, setVolumeDevices] = React.useState([]);\n\n  const [selectedVideoDevice, setSelectedVideoDevice] = React.useState(\"\");\n  const [\n    selectedMicrophoneDevice,\n    setSelectedMicrophoneDevice,\n  ] = React.useState(\"\");\n  const [selectedVolumeDevice, setSelectedVolumeDevice] = React.useState(\"\");\n\n  const [joinedUsers, setJoinedUsers] = React.useState([]);\n\n  const [deviceConstraints, setDeviceConstraints] = React.useState({\n    video: true,\n    audio: true,\n  });\n\n  const handleConnectToMediaStream = async (constraints) => {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n    setLocaleStream(stream);\n\n    if (!videoRef.current) return;\n\n    stream.getTracks().forEach((track) => peer.addTrack(track, stream));\n\n    // NOTE: fix me\n    videoRef.current.srcObject = stream;\n  };\n\n  const handleConnectToDevices = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    const microphones = devices.filter(({ kind }) => kind === \"audioinput\");\n    const volumes = devices.filter(({ kind }) => kind === \"audiooutput\");\n    const videos = devices.filter(({ kind }) => kind === \"videoinput\");\n\n    setter(microphones, setSelectedMicrophoneDevice);\n    setter(volumes, setSelectedVolumeDevice);\n    setter(videos, setSelectedVideoDevice);\n\n    setVideoDevices(videos);\n    setVolumeDevices(volumes);\n    setMicrophoneDevices(microphones);\n  };\n\n  const handleCall = async () => {\n    const sdpOffer = await peer.createOffer({ offerToReceiveVideo: true });\n\n    await peer.setLocalDescription(sdpOffer);\n\n    const message = {\n      type: MESSAGE.TYPE.WEBRTC_OFFER,\n      data: sdpOffer,\n      sender: senderName,\n      recipient: recipientName,\n    };\n\n    recipientRef.current = recipientName;\n\n    socket.send(JSON.stringify(message));\n  };\n\n  const handleJoinLobby = () => {\n    const message = {\n      type: MESSAGE.TYPE.JOIN_LOBBY,\n      data: \"\",\n      sender: senderName,\n      recipient: \"\",\n    };\n\n    socket.send(JSON.stringify(message));\n  };\n\n  const handleSelectRecipient = (newRecipientName) =>\n    setRecipientName(newRecipientName);\n\n  const handleInitListenersForDevices = () => {\n    navigator.mediaDevices.addEventListener(\n      \"devicechange\",\n      handleConnectToDevices\n    );\n  };\n\n  const handleInitListenersForPeer = () => {\n    peer.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        const message = {\n          type: MESSAGE.TYPE.ICE_CANDIDATE,\n          data: candidate,\n          sender: senderName,\n          recipient: recipientRef.current,\n        };\n\n        socket.send(JSON.stringify(message));\n      }\n    });\n\n    peer.addEventListener(\"track\", ({ streams }) => {\n      if (!remoteVideoRef.current) return;\n\n      const [stream] = streams;\n\n      if (remoteVideoRef.current.srcObject === stream) return;\n\n      remoteVideoRef.current.srcObject = stream;\n    });\n  };\n\n  const handleChangeSenderName = (event) => setSenderName(event.target.value);\n\n  const handleToggleDevicesStatus = (deviceType) => () =>\n    setDeviceConstraints((currentDevicesContraints) => {\n      const newDevicesContraints = {\n        ...currentDevicesContraints,\n        [deviceType]: !currentDevicesContraints[deviceType],\n      };\n\n      localeStream.getTracks().forEach((track) => {\n        if (track.kind === deviceType) {\n          track.enabled = !track.enabled;\n        }\n      });\n\n      return newDevicesContraints;\n    });\n\n  const handleChangeDevice = async (type, deviceId) => {\n    const newDevicesContraints = {\n      ...deviceConstraints,\n      [type]: {\n        deviceId: {\n          exact: deviceId,\n        },\n      },\n    };\n\n    const stream = await navigator.mediaDevices.getUserMedia(\n      newDevicesContraints\n    );\n    const track = stream.getTracks().find((track) => track.kind === type);\n\n    if (!track) return;\n\n    const sender = peer\n      .getSenders()\n      .find((sender) => sender.track.kind === track.kind);\n\n    if (!sender) return;\n\n    sender.replaceTrack(track);\n\n    switch (type) {\n      case \"audio\":\n        setSelectedMicrophoneDevice(deviceId);\n        break;\n      case \"video\":\n        setSelectedVideoDevice(deviceId);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleChangeOutputDevice = (deviceId) => {\n    if (!videoRef.current) return;\n\n    setSelectedVolumeDevice(deviceId);\n\n    // NOTE: do not work with connecting with new devices\n    videoRef.current.setSinkId(deviceId);\n  };\n\n  React.useEffect(() => {\n    handleInitListenersForPeer();\n    handleConnectToDevices().then(() => {\n      handleConnectToMediaStream(deviceConstraints);\n    });\n    handleInitListenersForDevices();\n\n    socket.addEventListener(\"message\", async (message) => {\n      const { type, data, sender, recipient } = JSON.parse(message.data);\n\n      if (type === MESSAGE.TYPE.PEER_LIST_CHANGED) {\n        setJoinedUsers(data.users);\n      }\n\n      if (type === MESSAGE.TYPE.WEBRTC_OFFER && sender !== senderName) {\n        // NOTE: fix me\n        recipientRef.current = sender;\n\n        await peer.setRemoteDescription(data);\n\n        const sdpAnswer = await peer.createAnswer();\n\n        await peer.setLocalDescription(sdpAnswer);\n\n        const message = {\n          type: MESSAGE.TYPE.WEBRTC_ANSWER,\n          data: sdpAnswer,\n          sender: recipient,\n          recipient: sender,\n        };\n        socket.send(JSON.stringify(message));\n      }\n\n      if (type === MESSAGE.TYPE.WEBRTC_ANSWER && sender !== senderName) {\n        await peer.setRemoteDescription(data);\n      }\n\n      console.log(type);\n      if (type === MESSAGE.TYPE.ICE_CANDIDATE) {\n        peer.addIceCandidate(data);\n      }\n    });\n  }, []);\n\n  return {\n    peer,\n\n    senderName,\n    handleChangeSenderName,\n\n    recipientName,\n    handleSelectRecipient,\n\n    videoRef,\n    remoteVideoRef,\n\n    isVideoOn: deviceConstraints.video,\n    isAudioOn: deviceConstraints.audio,\n    handleToggleDevicesStatus,\n\n    selectedVideoDevice,\n    selectedMicrophoneDevice,\n    selectedVolumeDevice,\n    handleChangeDevice,\n    handleChangeOutputDevice,\n\n    localeStream,\n    videoDevices,\n    microphoneDevices,\n    volumeDevices,\n    joinedUsers,\n    handleCall,\n    handleJoinLobby,\n  };\n};\n\nexport const App = () => {\n  const peer = usePeer();\n\n  return (\n    <Box p={2}>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item xs={6}>\n          <video\n            autoPlay\n            ref={peer.videoRef}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <video\n            autoPlay\n            ref={peer.remoteVideoRef}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={12} container spacing={2} justify=\"center\">\n          <Grid item xs=\"auto\">\n            <IconButton onClick={peer.handleToggleDevicesStatus(\"video\")}>\n              {peer.isVideoOn ? (\n                <Videocam color=\"primary\" />\n              ) : (\n                <VideocamOff color=\"error\" />\n              )}\n            </IconButton>\n          </Grid>\n          <Grid item xs=\"auto\">\n            <IconButton onClick={peer.handleToggleDevicesStatus(\"audio\")}>\n              {peer.isAudioOn ? (\n                <Mic color=\"primary\" />\n              ) : (\n                <MicOff color=\"error\" />\n              )}\n            </IconButton>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} container spacing={2}>\n          {Boolean(peer.microphoneDevices.length) && (\n            <Grid item xs={4}>\n              microphoneDevices\n              <CustomSelect\n                value={peer.selectedMicrophoneDevice}\n                type=\"audio\"\n                options={peer.microphoneDevices}\n                onChangeDevice={peer.handleChangeDevice}\n              />\n            </Grid>\n          )}\n          {Boolean(peer.videoDevices.length) && (\n            <Grid item xs={4}>\n              videoDevices\n              <CustomSelect\n                value={peer.selectedVideoDevice}\n                type=\"video\"\n                options={peer.videoDevices}\n                onChangeDevice={peer.handleChangeDevice}\n              />\n            </Grid>\n          )}\n          {Boolean(peer.volumeDevices.length) && (\n            <Grid item xs={4}>\n              volumeDevices\n              <CustomSelect\n                value={peer.selectedVolumeDevice}\n                type=\"volume\"\n                options={peer.volumeDevices}\n                onChangeDevice={peer.handleChangeOutputDevice}\n              />\n            </Grid>\n          )}\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            value={peer.senderName}\n            onChange={peer.handleChangeSenderName}\n            variant=\"outlined\"\n            fullWidth\n            autoFocus\n            disabled={Boolean(\n              peer.joinedUsers.find(({ name }) => name === peer.senderName)\n            )}\n          />\n        </Grid>\n        <Grid item xs=\"auto\">\n          <Button\n            {...buttonProps}\n            onClick={peer.handleCall}\n            disabled={!peer.recipientName}\n          >\n            Call {peer.recipientName && `to ${peer.recipientName}`}\n          </Button>\n        </Grid>\n        <Grid item xs=\"auto\">\n          <Button\n            {...buttonProps}\n            onClick={peer.handleJoinLobby}\n            disabled={\n              !peer.senderName ||\n              Boolean(\n                peer.joinedUsers.find(({ name }) => name === peer.senderName)\n              )\n            }\n          >\n            {Boolean(\n              peer.joinedUsers.find(({ name }) => name === peer.senderName)\n            )\n              ? \"Joined\"\n              : \"Join\"}\n          </Button>\n        </Grid>\n      </Grid>\n      <Lobby\n        users={peer.joinedUsers}\n        myName={peer.senderName}\n        onSelectRecipient={peer.handleSelectRecipient}\n      />\n    </Box>\n  );\n};\n","export const PEER = {\n  CONFIG: {\n    iceServers: [{ urls: [\"stun:stun.l.google.com:19302\"] }],\n  },\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["config/socket.js","constants.js","Lobby.js","App.js","config/peer.js","reportWebVitals.js","index.js"],"names":["socket","WebSocket","process","MESSAGE","JOIN_LOBBY","JOIN_LOBBY_ACK","GET_PEER_LIST","GET_PEER_LIST_ACK","PEER_LIST_CHANGED","GET_STUN_TURN_INFO","GET_STUN_TURN_INFO_ACK","WEBRTC_OFFER","WEBRTC_ANSWER","ICE_CANDIDATE","CALL_STARTED","HANG_UP","Lobby","users","myName","onSelectRecipient","Grid","container","spacing","map","name","status","item","xs","Badge","badgeContent","color","IconButton","style","borderRadius","onClick","Paper","component","Box","p","Typography","buttonProps","variant","filterDevices","devices","kind","filter","device","deviceId","CustomSelect","value","options","type","onChangeDevice","onChangeOutputDevice","Select","displayEmpty","fullWidth","onChange","event","target","MenuItem","disabled","label","getDefaultDevice","length","peer","RTCPeerConnection","iceServers","urls","usePeer","videoRef","React","useRef","remoteVideoRef","recipientRef","useState","uuid","slice","senderName","setSenderName","recipientName","setRecipientName","localeStream","setLocaleStream","microphones","volumes","videos","setDevices","microphoneId","volumeId","videoId","selectedDevices","setSelectedDevices","joinedUsers","setJoinedUsers","video","audio","deviceConstraints","setDeviceConstraints","handleConnectToDevices","a","navigator","mediaDevices","enumerateDevices","getUserMedia","exact","stream","current","getTracks","forEach","track","addTrack","srcObject","handleCall","createOffer","offerToReceiveVideo","offerToReceiveAudio","sdpOffer","setLocalDescription","message","data","sender","recipient","send","JSON","stringify","handleChangeDevice","newSelectedDevices","newDevicesContraints","stop","console","log","useEffect","addEventListener","candidate","streams","parse","setRemoteDescription","createAnswer","sdpAnswer","addIceCandidate","handleChangeSenderName","handleSelectRecipient","newRecipientName","isVideoOn","isAudioOn","handleToggleDevicesStatus","deviceType","currentDevicesContraints","enabled","handleChangeOutputDevice","currentSelectedDevices","setSinkId","handleJoinLobby","App","justify","autoPlay","ref","width","height","Videocam","VideocamOff","Mic","MicOff","TextField","autoFocus","Boolean","find","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.4c8c1a75.chunk.js","sourcesContent":["export const socket = new WebSocket(process.env.REACT_APP_SOCKET);\n","export const MESSAGE = {\n  TYPE: {\n    JOIN_LOBBY: \"JOIN_LOBBY\",\n    JOIN_LOBBY_ACK: \"JOIN_LOBBY_ACK\",\n\n    GET_PEER_LIST: \"GET_PEER_LIST\",\n    GET_PEER_LIST_ACK: \"GET_PEER_LIST_ACK\",\n    PEER_LIST_CHANGED: \"PEER_LIST_CHANGED\",\n\n    GET_STUN_TURN_INFO: \"GET_STUN_TURN_INFO\",\n    GET_STUN_TURN_INFO_ACK: \"GET_STUN_TURN_INFO_ACK\",\n\n    WEBRTC_OFFER: \"WEBRTC_OFFER\",\n    WEBRTC_ANSWER: \"WEBRTC_ANSWER\",\n    ICE_CANDIDATE: \"ICE_CANDIDATE\",\n\n    CALL_STARTED: \"CALL_STARTED\",\n\n    HANG_UP: \"HANG_UP\",\n  },\n};\n","import {\n  Grid,\n  Box,\n  Paper,\n  Typography,\n  Badge,\n  IconButton,\n} from \"@material-ui/core\";\n\nexport const Lobby = ({ users, myName, onSelectRecipient }) => (\n  <Grid container spacing={2}>\n    {users.map(({ name, status }) => {\n      if (myName === name) return null;\n\n      return (\n        <Grid item xs=\"auto\" key={name}>\n          <Badge\n            badgeContent={status === \"ONLINE\" ? \"online\" : \"offline\"}\n            color={status === \"ONLINE\" ? \"primary\" : \"secondary\"}\n          >\n            <IconButton\n              style={{ borderRadius: 8 }}\n              onClick={() => onSelectRecipient(name)}\n            >\n              <Paper component={Box} p={2}>\n                <Typography>{name}</Typography>\n              </Paper>\n            </IconButton>\n          </Badge>\n        </Grid>\n      );\n    })}\n  </Grid>\n);\n","import React from \"react\";\n\nimport { v4 as uuid } from \"uuid\";\n\nimport {\n  Select,\n  MenuItem,\n  Grid,\n  Box,\n  Button,\n  TextField,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Videocam, VideocamOff, Mic, MicOff } from \"@material-ui/icons\";\n\nimport \"webrtc-adapter\";\n\nimport { PEER } from \"./config/peer\";\nimport { socket } from \"./config/socket\";\nimport { MESSAGE } from \"./constants\";\n\nimport { Lobby } from \"./Lobby\";\n\nconst buttonProps = {\n  variant: \"contained\",\n  color: \"primary\",\n};\n\nconst filterDevices = (devices, kind) =>\n  devices.filter(\n    (device) => device.kind === kind && device.deviceId !== \"default\"\n  );\n\nconst CustomSelect = ({\n  value,\n  options,\n  type,\n  onChangeDevice,\n  onChangeOutputDevice,\n}) => {\n  const handleChangeDevice = (event) => {\n    const deviceId = event.target.value;\n\n    if (onChangeDevice) {\n      onChangeDevice(type, deviceId);\n    }\n\n    if (onChangeOutputDevice) {\n      onChangeOutputDevice(deviceId);\n    }\n  };\n\n  return (\n    <Select\n      value={value}\n      displayEmpty\n      fullWidth\n      variant=\"outlined\"\n      onChange={handleChangeDevice}\n    >\n      <MenuItem value=\"\" disabled>\n        Select device\n      </MenuItem>\n      {options.map(({ deviceId, label }) => (\n        <MenuItem key={deviceId} value={deviceId}>\n          {label}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n};\n\nconst getDefaultDevice = (devices) => {\n  if (devices.length) {\n    const [{ deviceId }] = devices;\n\n    return deviceId;\n  }\n\n  return undefined;\n};\n\nconst generateSenderName = () => `${uuid().slice(0, 4)}@${uuid().slice(0, 4)}`;\n\nconst peer = new RTCPeerConnection(PEER.CONFIG);\n\nconst usePeer = () => {\n  const videoRef = React.useRef(null);\n  const remoteVideoRef = React.useRef(null);\n\n  const recipientRef = React.useRef(null);\n\n  const [senderName, setSenderName] = React.useState(generateSenderName());\n  const [recipientName, setRecipientName] = React.useState(\"\");\n  const [localeStream, setLocaleStream] = React.useState(null);\n\n  const [devices, setDevices] = React.useState({\n    microphones: [],\n    volumes: [],\n    videos: [],\n  });\n\n  const [selectedDevices, setSelectedDevices] = React.useState({\n    microphoneId: \"\",\n    volumeId: \"\",\n    videoId: \"\",\n  });\n\n  const [joinedUsers, setJoinedUsers] = React.useState([]);\n\n  const [deviceConstraints, setDeviceConstraints] = React.useState({\n    video: true,\n    audio: true,\n  });\n\n  // const handleConnectToMediaStream = async (constraints) => {\n  //   const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n  //   setLocaleStream(stream);\n\n  //   if (!videoRef.current) return;\n\n  //   stream.getTracks().forEach((track) => peer.addTrack(track, stream));\n\n  //   // NOTE: fix me\n  //   videoRef.current.srcObject = stream;\n  // };\n\n  const handleConnectToDevices = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n\n    const microphones = filterDevices(devices, \"audioinput\");\n    const volumes = filterDevices(devices, \"audiooutput\");\n    const videos = filterDevices(devices, \"videoinput\");\n\n    setDevices({\n      microphones,\n      volumes,\n      videos,\n    });\n\n    const microphoneId = getDefaultDevice(microphones);\n    const volumeId = getDefaultDevice(volumes);\n    const videoId = getDefaultDevice(videos);\n\n    setSelectedDevices({\n      microphoneId,\n      volumeId,\n      videoId,\n    });\n\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: {\n          exact: videoId,\n        },\n      },\n      audio: {\n        deviceId: {\n          exact: microphoneId,\n        },\n      },\n    });\n\n    setLocaleStream(stream);\n\n    if (!videoRef.current) return;\n\n    stream.getTracks().forEach((track) => peer.addTrack(track, stream));\n\n    // NOTE: fix me\n    videoRef.current.srcObject = stream;\n  };\n\n  const handleCall = async () => {\n    const sdpOffer = await peer.createOffer({\n      offerToReceiveVideo: true,\n      offerToReceiveAudio: true,\n    });\n\n    await peer.setLocalDescription(sdpOffer);\n\n    const message = {\n      type: MESSAGE.TYPE.WEBRTC_OFFER,\n      data: sdpOffer,\n      sender: senderName,\n      recipient: recipientName,\n    };\n\n    recipientRef.current = recipientName;\n\n    socket.send(JSON.stringify(message));\n  };\n\n  const handleJoinLobby = () => {\n    const message = {\n      type: MESSAGE.TYPE.JOIN_LOBBY,\n      data: \"\",\n      sender: senderName,\n      recipient: \"\",\n    };\n\n    socket.send(JSON.stringify(message));\n  };\n\n  const handleSelectRecipient = (newRecipientName) =>\n    setRecipientName(newRecipientName);\n\n  const handleInitListenersForDevices = () => {\n    navigator.mediaDevices.addEventListener(\n      \"devicechange\",\n      handleConnectToDevices\n    );\n  };\n\n  const handleInitListenersForPeer = () => {\n    peer.addEventListener(\"icecandidate\", ({ candidate }) => {\n      if (candidate) {\n        const message = {\n          type: MESSAGE.TYPE.ICE_CANDIDATE,\n          data: candidate,\n          sender: senderName,\n          recipient: recipientRef.current,\n        };\n\n        socket.send(JSON.stringify(message));\n      }\n    });\n\n    peer.addEventListener(\"track\", ({ streams }) => {\n      if (!remoteVideoRef.current) return;\n\n      const [stream] = streams;\n\n      if (remoteVideoRef.current.srcObject === stream) return;\n\n      remoteVideoRef.current.srcObject = stream;\n    });\n  };\n\n  const handleChangeSenderName = (event) => setSenderName(event.target.value);\n\n  const handleToggleDevicesStatus = (deviceType) => () =>\n    setDeviceConstraints((currentDevicesContraints) => {\n      const newDevicesContraints = {\n        ...currentDevicesContraints,\n        [deviceType]: !currentDevicesContraints[deviceType],\n      };\n\n      localeStream.getTracks().forEach((track) => {\n        if (track.kind === deviceType) {\n          track.enabled = !track.enabled;\n        }\n      });\n\n      return newDevicesContraints;\n    });\n\n  // const handleChangeDevice = async (type, deviceId) => {\n  //   const newDevicesContraints = {\n  //     ...deviceConstraints,\n  //     [type]: {\n  //       deviceId: {\n  //         exact: deviceId,\n  //       },\n  //     },\n  //   };\n\n  //   const stream = await navigator.mediaDevices.getUserMedia(\n  //     newDevicesContraints\n  //   );\n  //   const track = stream.getTracks().find((track) => track.kind === type);\n\n  //   if (!track) return;\n\n  //   const sender = peer\n  //     .getSenders()\n  //     .find((sender) => sender.track.kind === track.kind);\n\n  //   if (!sender) return;\n\n  //   sender.replaceTrack(track);\n\n  //   setSelectedDevices((state) => ({\n  //     ...state,\n  //     [type]: deviceId,\n  //   }));\n  // };\n\n  const handleChangeDevice = async (type, deviceId) => {\n    const newSelectedDevices = {\n      ...selectedDevices,\n      [type]: deviceId,\n    };\n\n    const newDevicesContraints = {\n      video: {\n        deviceId: {\n          exact: newSelectedDevices.videoId,\n        },\n      },\n      audio: {\n        deviceId: {\n          exact: newSelectedDevices.microphoneId,\n        },\n      },\n    };\n\n    const stream = await navigator.mediaDevices.getUserMedia(\n      newDevicesContraints\n    );\n\n    localeStream.getTracks().forEach((track) => {\n      track.stop();\n    });\n\n    setLocaleStream(stream);\n\n    if (!videoRef.current) return;\n\n    stream.getTracks().forEach((track) => peer.addTrack(track, stream));\n\n    // NOTE: fix me\n    videoRef.current.srcObject = stream;\n\n    console.log(\"newSelectedDevices\", newSelectedDevices);\n\n    setSelectedDevices(newSelectedDevices);\n  };\n\n  const handleChangeOutputDevice = (deviceId) => {\n    if (!videoRef.current) return;\n\n    setSelectedDevices((currentSelectedDevices) => ({\n      ...currentSelectedDevices,\n      volumeId: deviceId,\n    }));\n\n    // NOTE: do not work with connecting with new devices\n    videoRef.current.setSinkId(deviceId);\n  };\n\n  React.useEffect(() => {\n    handleInitListenersForPeer();\n    handleConnectToDevices();\n    handleInitListenersForDevices();\n\n    socket.addEventListener(\"message\", async (message) => {\n      const { type, data, sender, recipient } = JSON.parse(message.data);\n\n      if (type === MESSAGE.TYPE.PEER_LIST_CHANGED) {\n        setJoinedUsers(data.users);\n      }\n\n      if (type === MESSAGE.TYPE.WEBRTC_OFFER && sender !== senderName) {\n        // NOTE: fix me\n        recipientRef.current = sender;\n\n        await peer.setRemoteDescription(data);\n\n        const sdpAnswer = await peer.createAnswer();\n\n        await peer.setLocalDescription(sdpAnswer);\n\n        const message = {\n          type: MESSAGE.TYPE.WEBRTC_ANSWER,\n          data: sdpAnswer,\n          sender: recipient,\n          recipient: sender,\n        };\n        socket.send(JSON.stringify(message));\n      }\n\n      if (type === MESSAGE.TYPE.WEBRTC_ANSWER && sender !== senderName) {\n        await peer.setRemoteDescription(data);\n      }\n\n      console.log(type);\n      if (type === MESSAGE.TYPE.ICE_CANDIDATE) {\n        peer.addIceCandidate(data);\n      }\n    });\n  }, []);\n\n  return {\n    peer,\n\n    senderName,\n    handleChangeSenderName,\n\n    recipientName,\n    handleSelectRecipient,\n\n    videoRef,\n    remoteVideoRef,\n\n    isVideoOn: deviceConstraints.video,\n    isAudioOn: deviceConstraints.audio,\n    handleToggleDevicesStatus,\n\n    devices,\n    selectedDevices,\n    handleChangeDevice,\n    handleChangeOutputDevice,\n\n    localeStream,\n    joinedUsers,\n    handleCall,\n    handleJoinLobby,\n  };\n};\n\nexport const App = () => {\n  const peer = usePeer();\n\n  return (\n    <Box p={2}>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item xs={6}>\n          <video\n            autoPlay\n            ref={peer.videoRef}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <video\n            autoPlay\n            ref={peer.remoteVideoRef}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </Grid>\n        <Grid item xs={12} container spacing={2} justify=\"center\">\n          <Grid item xs=\"auto\">\n            <IconButton onClick={peer.handleToggleDevicesStatus(\"video\")}>\n              {peer.isVideoOn ? (\n                <Videocam color=\"primary\" />\n              ) : (\n                <VideocamOff color=\"error\" />\n              )}\n            </IconButton>\n          </Grid>\n          <Grid item xs=\"auto\">\n            <IconButton onClick={peer.handleToggleDevicesStatus(\"audio\")}>\n              {peer.isAudioOn ? (\n                <Mic color=\"primary\" />\n              ) : (\n                <MicOff color=\"error\" />\n              )}\n            </IconButton>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} container spacing={2}>\n          <Grid item xs={4}>\n            microphoneDevices\n            <CustomSelect\n              value={peer.selectedDevices.microphoneId}\n              type=\"microphoneId\"\n              options={peer.devices.microphones}\n              onChangeDevice={peer.handleChangeDevice}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            videoDevices\n            <CustomSelect\n              value={peer.selectedDevices.videoId}\n              type=\"videoId\"\n              options={peer.devices.videos}\n              onChangeDevice={peer.handleChangeDevice}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            volumeDevices\n            <CustomSelect\n              value={peer.selectedDevices.volumeId}\n              options={peer.devices.volumes}\n              onChangeOutputDevice={peer.handleChangeOutputDevice}\n            />\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            value={peer.senderName}\n            onChange={peer.handleChangeSenderName}\n            variant=\"outlined\"\n            fullWidth\n            autoFocus\n            disabled={Boolean(\n              peer.joinedUsers.find(({ name }) => name === peer.senderName)\n            )}\n          />\n        </Grid>\n        <Grid item xs=\"auto\">\n          <Button\n            {...buttonProps}\n            onClick={peer.handleCall}\n            disabled={!peer.recipientName}\n          >\n            Call {peer.recipientName && `to ${peer.recipientName}`}\n          </Button>\n        </Grid>\n        <Grid item xs=\"auto\">\n          <Button\n            {...buttonProps}\n            onClick={peer.handleJoinLobby}\n            disabled={\n              !peer.senderName ||\n              Boolean(\n                peer.joinedUsers.find(({ name }) => name === peer.senderName)\n              )\n            }\n          >\n            {Boolean(\n              peer.joinedUsers.find(({ name }) => name === peer.senderName)\n            )\n              ? \"Joined\"\n              : \"Join\"}\n          </Button>\n        </Grid>\n      </Grid>\n      <Lobby\n        users={peer.joinedUsers}\n        myName={peer.senderName}\n        onSelectRecipient={peer.handleSelectRecipient}\n      />\n    </Box>\n  );\n};\n","export const PEER = {\n  CONFIG: {\n    iceServers: [{ urls: [\"stun:stun.l.google.com:19302\"] }],\n  },\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}